{"version":3,"sources":["actions/forecast/actions-creators.js","actions/constants/action-types.js","actions/forecast/index.js","actions/error/actions-creators.js","components/Footer/index.js","components/Header/index.js","components/SelectCity/index.js","components/Widget/index.js","components/Spinner/index.js","App.js","reducers/forecast/index.js","reducers/index.js","store/index.js","index.js"],"names":["forecastIsLoading","bool","type","payload","loadForecast","lat","lng","dispatch","url","fetch","then","res","json","data","forecastSucceeded","catch","e","Footer","className","Header","SelectCity","change","selectedOption","target","value","props","cities","handleChange","reboot","forEach","city","name","setState","this","onChange","defaultValue","map","key","Component","defaultProps","Widget","weather","location","toPercent","widgetClass","classNames","iconWeatherClass","icon__wrapper","icon","celsiusTemp","toCelsius","parseInt","temperature","humidity","cloudCover","currentTime","Date","time","toDateString","split","summary","Spinner","App","state","displayForecast","actions","isLoading","locationWeather","toLowerCase","reset","currently","forecast","Locations","appClass","AppWeather","connect","bindActionCreators","forecastActions","INITIAL_STATE","reducers","combineReducers","error","action","middleware","thunkMiddleware","composeEnhancers","compose","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","push","reduxLogger","store","createStore","applyMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.81de2940.chunk.js","sourcesContent":["import {\n    FORECAST_IS_LOADING,\n    FORECAST_IS_SUCCEEDED\n} from '../constants/action-types';\n\nexport const forecastIsLoading = bool => ({\n    type: FORECAST_IS_LOADING,\n    payload: bool\n});\n\nexport const forecastSucceeded = data => ({\n    type: FORECAST_IS_SUCCEEDED,\n    payload: data\n});\n","export const ERROR_HAS_OCCURRED = 'ERROR_HAS_OCCURRED';\nexport const FORECAST_IS_LOADING = 'FORECAST_IS_LOADING';\nexport const FORECAST_IS_SUCCEEDED = 'FORECAST_IS_SUCCEEDED';\n","import { forecastIsLoading, forecastSucceeded } from './actions-creators';\n\nimport { errorHasOccurred } from '../error/actions-creators';\n\nconst loadForecast = (lat, lng) => dispatch => {\n    const key = 'c4692383bc048da19f7aefdf355f6bbf';\n    const url = `https://cors-anywhere.herokuapp.com/https://api.darksky.net/forecast/${key}/${lat},${lng}`;\n\n    dispatch(forecastIsLoading(true));\n\n    return fetch(url)\n        .then(res => res.json())\n        .then(data => {\n            dispatch(forecastIsLoading(false));\n            return dispatch(forecastSucceeded(data));\n        })\n        .catch(e => dispatch(errorHasOccurred(e)));\n};\n\nexport default {\n    loadForecast\n};\n","import { ERROR_HAS_OCCURRED } from '../constants/action-types';\n\nexport const errorHasOccurred = () => ({\n    type: ERROR_HAS_OCCURRED,\n    payload: true\n});\n","import React from 'react';\n\nconst Footer = () => (\n    <footer>\n        <div className=\"footer__inner-block\">\n            <h4>Alexandre gadaix</h4>\n            <small>2019</small>\n        </div>\n    </footer>\n);\nexport default Footer;\n","import React from 'react';\n\nconst Header = () => (\n    <div>\n        <header>\n            <div className=\"logo-wrapper\"></div>\n        </header>\n    </div>\n);\nexport default Header;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass SelectCity extends Component {\n  change = e => {\n      const selectedOption = e.target.value;\n      const { cities, handleChange, reboot } = this.props;\n      cities.forEach(city => {\n          if (selectedOption === 'default') reboot();\n          if (city.name === selectedOption)\n              handleChange(city.lat, city.lng, city.name);\n      });\n      this.setState({ value: selectedOption });\n  };\n\n  render() {\n      const { cities } = this.props;\n      return (\n          <select className=\"select-component\" onChange={this.change}>\n              <option value=\"default\" defaultValue>\n          choose a city\n              </option>\n              {cities.map(city => (\n                  <option value={city.name} key={city.name} className=\"option-item\">\n                      {city.name}\n                  </option>\n              ))}\n          </select>\n      );\n  }\n}\n\nSelectCity.propTypes = {\n    cities: PropTypes.arrayOf(\n        PropTypes.shape({\n            name: PropTypes.string.isRequired,\n            lat: PropTypes.number.isRequired,\n            lng: PropTypes.number.isRequired\n        })\n    ),\n    handleChange: PropTypes.func,\n    reboot: PropTypes.func\n};\n\nSelectCity.defaultProps = {\n    handleChange: () => {},\n    reboot: () => {}\n};\n\nexport default SelectCity;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nconst Widget = ({ weather, location }) => {\n    const toPercent = data => {\n        return `${data * 100}%`;\n    };\n\n    const toCelsius = data => {\n        const toCelsius = ((data - 32) * 5) / 9;\n        const parseCelsius = parseInt(toCelsius);\n        return parseCelsius;\n    };\n\n    const widgetClass = classNames({\n        'weather-widget__wrapper': true,\n        [`${location}`]: true\n    });\n\n    const iconWeatherClass = classNames({\n        icon__wrapper: true,\n        [`${weather.icon}`]: true\n    });\n    const celsiusTemp = toCelsius(weather.temperature);\n    const humidity = toPercent(weather.humidity);\n    const cloudCover = toPercent(weather.cloudCover);\n    const currentTime = new Date(weather.time * 1000).toDateString().split(' ');\n\n    return (\n        <article className={widgetClass}>\n            <article className=\"block-content\">\n                <h3>{location}</h3>\n                <h4>\n                    {currentTime[0]} {currentTime[1]} {currentTime[2]}\n                </h4>\n                <div className={iconWeatherClass}></div>\n                <p>{weather.summary}</p>\n            </article>\n            <article className=\"block-content\">\n                <p className=\"temperature\">\n                    {parseInt(celsiusTemp)} <sup>&#8451;</sup>\n                </p>\n                <p className=\"humidity\">\n                    <span>humidity: </span>\n                    {parseInt(humidity)}%\n                </p>\n                <p className=\"cloudCover\">\n                    <span>cloud cover: </span>\n                    {parseInt(cloudCover)}%\n                </p>\n            </article>\n        </article>\n    );\n};\n\nWidget.propTypes = {\n    weather: PropTypes.shape({}),\n    location: PropTypes.string\n};\n\nWidget.defaultProps = {\n    weather: {},\n    location: ''\n};\n\nexport default Widget;\n","import React from 'react';\n\nconst Spinner = () => (\n    <div className=\"spinner\">\n        <div className=\"pulse-container\">\n            <div className=\"pulse-bubble pulse-bubble-1\" />\n            <div className=\"pulse-bubble pulse-bubble-2\" />\n            <div className=\"pulse-bubble pulse-bubble-3\" />\n        </div>\n    </div>\n);\n\nexport default Spinner;\n","import { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport React, { Component } from 'react';\nimport classNames from 'classnames';\n\nimport forecastActions from './actions/forecast';\n\nimport Footer from './components/Footer';\nimport Header from './components/Header';\nimport SelectCity from './components/SelectCity';\nimport Widget from './components/Widget';\n\nimport Spinner from './components/Spinner';\n\nimport Locations from './datas/locations';\n\nexport class App extends Component {\n  state = {\n      displayForecast: false\n  };\n\n  handleChange = (lat, lng, location) => {\n      const { actions } = this.props;\n      this.setState({ isLoading: true });\n      actions.loadForecast(lat, lng).then(() => {\n          this.setState({\n              displayForecast: true,\n              isLoading: false,\n              locationWeather: location.toLowerCase()\n          });\n      });\n  };\n\n  reset = () => {\n      this.setState({ displayForecast: false });\n  };\n\n  render() {\n      const { displayForecast, isLoading, locationWeather } = this.state;\n      const { forecast } = this.props;\n      const { currently } = forecast;\n      const cities = Locations.cities;\n      const appClass = classNames({\n          AppWeather: true\n      });\n\n      return (\n          <div className={appClass}>\n              <Header />\n              <main>\n                  <section className=\"select-city__wrapper\">\n                      <h2>Get current weather</h2>\n                      <SelectCity\n                          cities={cities}\n                          handleChange={this.handleChange}\n                          reboot={this.reset}\n                      />\n                  </section>\n                  <section className=\"weather-response__wrapper\">\n                      <div className=\"weather-infos__wrapper\">\n                          {isLoading ? (\n                              <Spinner />\n                          ) : (\n                              displayForecast && (\n                                  <Widget weather={currently} location={locationWeather} />\n                              )\n                          )}\n                      </div>\n                  </section>\n              </main>\n              <Footer />\n          </div>\n      );\n  }\n}\n\nconst mapStateToProps = state => ({\n    ...state\n});\n\nconst mapDispatchToProps = dispatch => ({\n    actions: bindActionCreators(forecastActions, dispatch)\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(App);\n","import {\n    FORECAST_IS_LOADING,\n    FORECAST_IS_SUCCEEDED\n} from '../../actions/constants/action-types';\n\nconst INITIAL_STATE = {};\n\nexport default (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case FORECAST_IS_LOADING:\n            return {\n                ...state,\n                forecastIsLoading: action.payload\n            };\n        case FORECAST_IS_SUCCEEDED:\n            return {\n                ...state,\n                ...action.payload\n            };\n        default:\n            return state;\n    }\n};\n","import { combineReducers } from 'redux';\n\nimport { ERROR_HAS_OCCURRED } from '../actions/constants/action-types';\nimport forecastReducer from './forecast';\n\nexport const errorReducer = (state = {}, action) => {\n    switch (action.type) {\n        case ERROR_HAS_OCCURRED:\n            return {\n                ...state,\n                error: action.payload\n            };\n        default:\n            return state;\n    }\n};\n\nconst reducers = combineReducers({\n    error: errorReducer,\n    forecast: forecastReducer\n});\n\nexport default reducers;\n","import { applyMiddleware, compose, createStore } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport reduxLogger from 'redux-logger';\n\nimport reducers from '../reducers';\n\nconst middleware = [thunkMiddleware];\nlet composeEnhancers = compose;\n\ncomposeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nmiddleware.push(reduxLogger);\n\nconst store = createStore(\n    reducers,\n    composeEnhancers(applyMiddleware(...middleware))\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport { Provider } from 'react-redux';\n\nimport store from './store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}